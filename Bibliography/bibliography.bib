% Encoding: UTF-8
@inproceedings{RefactoringFowler2002Improving,
	title        = {Refactoring: Improving the Design of Existing Code},
	author       = {Fowler, Martin},
	year         = 2002,
	booktitle    = {Extreme Programming and Agile Methods --- XP/Agile Universe 2002},
	publisher    = {Springer Berlin Heidelberg},
	address      = {Berlin, Heidelberg},
	pages        = {256--256},
	doi          = {10.1007/3-540-45672-4\_31},
	isbn         = {978-3-540-45672-8},
	editor       = {Wells, Don and Williams, Laurie},
	abstract     = {Almost every expert in Object-Oriented Development stresses the importance of iterative development. As you proceed with the iterative development, you need to add function to the existing code base. If you are really lucky that code base is structured just right to support the new function while still preserving its design integrity. Of course most of the time we are not lucky, the code does not quite fit what we want to do. You could just add the function on top of the code base. But soon this leads to applying patch upon patch making your system more complex than it needs to be. This complexity leads to bugs, and cripples your productivity.}
}
@incollection{Lehman1996Laws,
	title        = {Laws of software evolution revisited},
	author       = {Lehman, M. M.},
	year         = 1996,
	journal      = {Software Process Technology},
	booktitle    = {Software Process Technology},
	publisher    = {Springer Berlin Heidelberg},
	address      = {Berlin/Heidelberg},
	series       = {Lecture Notes in Computer Science},
	volume       = 1149,
	pages        = {108--124},
	doi          = {10.1007/bfb0017737},
	isbn         = {3-540-61771-X},
	url          = {http://dx.doi.org/10.1007/bfb0017737},
	added-at     = {2019-06-10T14:53:09.000+0200},
	chapter      = 12,
	editor       = {Montangero, Carlo},
	interhash    = {8eee05a69acd517da573bac26cdcd8ab},
	intrahash    = {5ede6cd06fa1d9a166f9cf2d6b19a976},
	keywords     = {software},
	posted-at    = {2009-06-08 15:31:02},
	priority     = 2,
	timestamp    = {2019-06-10T14:53:09.000+0200}
}
@article{estructuringArnold1989,
	title        = {Software restructuring},
	author       = {Arnold, R.S.},
	year         = 1989,
	journal      = {Proceedings of the IEEE},
	volume       = 77,
	number       = 4,
	pages        = {607--617},
	doi          = {10.1109/5.24146},
	keywords     = {Software maintenance;Documentation;Software standards;Productivity;Costs;Software engineering;Software systems}
}
@book{wake2004refactoringWorkbook,
	title        = {Refactoring Workbook},
	author       = {Wake, W.C.},
	year         = 2004,
	publisher    = {Addison-Wesley},
	isbn         = 9780321109293,
	url          = {https://books.google.pt/books?id=KE-zdnHQehYC},
	lccn         = 2003057903
}
@article{ReverseEngineering2011,
	title        = {Achievements and challenges in software reverse engineering},
	author       = {Canfora, Gerardo and Di Penta, Massimiliano and Cerulo, Luigi},
	year         = 2011,
	month        = 4,
	journal      = {Commun. ACM},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	volume       = 54,
	number       = 4,
	pages        = {142–151},
	doi          = {10.1145/1924421.1924451},
	issn         = {0001-0782},
	url          = {https://doi.org/10.1145/1924421.1924451},
	issue_date   = {April 2011},
	abstract     = {Deeply understanding the intricacies of software must always come before any considerations for modifying it.},
	numpages     = 10
}
@article{LehmanLaws1980,
	title        = {Programs, life cycles, and laws of software evolution},
	author       = {Lehman, M.M.},
	year         = 1980,
	journal      = {Proceedings of the IEEE},
	volume       = 68,
	number       = 9,
	pages        = {1060--1076},
	doi          = {10.1109/PROC.1980.11805},
	keywords     = {Application software;Environmental economics;Computer applications;Economic indicators;Microprocessors;Productivity;Software maintenance;Fabrics;Automatic programming}
}
@inproceedings{Lehman1978ProgramsCS,
	title        = {Programs, Cities, Students-- Limits to Growth?},
	author       = {Meir M. Lehman},
	year         = 1978,
	url          = {https://api.semanticscholar.org/CorpusID:59633732}
}
}
@inproceedings{ReverseEngineering2005,
	title        = {Deobfuscation: reverse engineering obfuscated code},
	author       = {Udupa, S.K. and Debray, S.K. and Madou, M.},
	year         = 2005,
	booktitle    = {12th Working Conference on Reverse Engineering (WCRE'05)},
	pages        = {10 pp.-54},
	doi          = {10.1109/WCRE.2005.13},
	keywords     = {Reverse engineering;Software engineering;Protection;Costs;Application software;Computer viruses;Computer science;Computer security;Software systems;Watermarking}
}
@article{ReverseEngineering1990,
	title        = {Reverse engineering and design recovery: a taxonomy},
	author       = {Chikofsky, E.J. and Cross, J.H.},
	year         = 1990,
	journal      = {IEEE Software},
	volume       = 7,
	number       = 1,
	pages        = {13--17},
	doi          = {10.1109/52.43044},
	keywords     = {Reverse engineering;Taxonomy;Software maintenance;Hardware;Software systems;Software performance;Water heating;Engineering drawings;Cloning;Control systems}
}
@online{UsercubeDocument,
	title        = {Netwrix Usercube Documentation},
	author       = {Netwrix},
	year         = 2024,
	url          = {https://web.archive.org/web/20240419111155/https://helpcenter.netwrix.com/bundle/Usercube\_6.0SaaS/page/Content/Usercube/index.html},
	urldate      = {2024-04-19}
}
@article{SurveyRefactoring2004,
	title        = {A Survey of software refactoring},
	author       = {Mens, Tom and Tourwe, Tom},
	year         = 2004,
	month        = {03},
	journal      = {Software Engineering, IEEE Transactions on},
	volume       = 30,
	pages        = {126--139},
	doi          = {10.1109/TSE.2004.1265817}
}
@article{DevelopmentModels2010,
	title        = {Software development lifecycle models},
	author       = {Ruparelia, Nayan B.},
	year         = 2010,
	month        = 5,
	journal      = {SIGSOFT Softw. Eng. Notes},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	volume       = 35,
	number       = 3,
	pages        = {8–13},
	doi          = {10.1145/1764810.1764814},
	issn         = {0163-5948},
	url          = {https://doi.org/10.1145/1764810.1764814},
	issue_date   = {May 2010},
	abstract     = {This history column article provides a tour of the main software development life cycle (SDLC) models. (A lifecycle covers all the stages of software from its inception with requirements definition through to fielding and maintenance.) System development lifecycle models have drawn heavily on software and so the two terms can be used interchangeably in terms of SDLC, especially since software development in this respect encompasses software systems development. Because the merits of selecting and using an SDLC vary according to the environment in which software is developed as well as its application, I discuss three broad categories for consideration when analyzing the relative merits of SDLC models. I consider the waterfall model before the other models because it has had a profound effect on software development, and has additionally influenced many SDLC models prevalent today. Thereafter, I consider some of the mainstream models and finish with a discussion of what the future could hold for SDLC models.},
	numpages     = 6,
	keywords     = {wheel-and-spoke, waterfall, unified, spiral, incremental, Vmodel, SEN history column, SDLC, RAD, B-model}
}
@book{SoftwareEvolutionMens2008,
	title        = {Software Evolution},
	year         = 2008,
	publisher    = {Springer-Verlag},
	isbn         = {978-3-540-76439-7},
	added-at     = {2008-07-07T16:45:32.000+0200},
	biburl       = {https://www.bibsonomy.org/bibtex/2671e844fa09167bde241edcbeb18f871/pdeleenh},
	date-added   = {2007-10-18 14:39:32 +0200},
	date-modified = {2007-10-18 14:40:41 +0200},
	editor       = {Mens, Tom and Demeyer, Serge},
	interhash    = {f278b22ce1947cfb70faa1bd8990eb14},
	intrahash    = {671e844fa09167bde241edcbeb18f871},
	keywords     = {evolution software},
	owner        = {pdeleenh},
	timestamp    = {2008-07-07T16:48:05.000+0200}
}
@article{ManagingMaintenance1983,
	title        = {Managing application program maintenance expenditures},
	author       = {Guimaraes, Tor},
	year         = 1983,
	month        = 8,
	journal      = {Commun. ACM},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	volume       = 26,
	number       = 10,
	pages        = {739–746},
	doi          = {10.1145/358413.358421},
	issn         = {0001-0782},
	url          = {https://doi.org/10.1145/358413.358421},
	issue_date   = {Oct. 1983},
	abstract     = {Program maintenance represents a major portion of the total expenditures on application programs. Despite the attention this subject has received in the MIS literature, new guidelines to action in this area remain of great interest to practitioners. A large number of variables thought to be determinants of application program maintenance expenditure have been studied through the inspection of application portfolios and personal interviews with top computer executives and systems development personnel. Based on the results, recommendations are made on how to reduce application program maintenance expenditures.},
	numpages     = 8,
	keywords     = {application program maintenance, managing application program maintenance expenditures}
}
@article{MetricsMaintainability1994,
	title        = {Using Metrics to Evaluate Software System Maintainability},
	author       = {Coleman, Don and Ash, Dan and Lowther, Bruce and Oman, Paul},
	year         = 1994,
	month        = {09},
	journal      = {Computer},
	volume       = 27,
	pages        = {44--49},
	doi          = {10.1109/2.303623}
}
@book{lientz1980software,
	title        = {Software Maintenance Management: A Study of the Maintenance of Computer Application Software in 487 Data Processing Organizations},
	author       = {Lientz, B.P. and Swanson, E.B.},
	year         = 1980,
	publisher    = {Addison-Wesley},
	isbn         = 9780201042054,
	url          = {https://books.google.pt/books?id=KEkVAQAAIAAJ},
	lccn         = 80012154
}
@article{MaintenanceGlass1998,
	title        = {Maintenance: less is not more},
	author       = {Glass, R.L.},
	year         = 1998,
	journal      = {IEEE Software},
	volume       = 15,
	number       = 4,
	pages        = {67--68},
	doi          = {10.1109/52.687948},
	keywords     = {Software maintenance;Books;Software standards;Engineering profession;Software engineering;Dictionaries;Glass;Programming profession;Aging}
}
@article{ContinuousEngineering2017,
	title        = {Continuous software engineering: A roadmap and agenda},
	author       = {Brian Fitzgerald and Klaas-Jan Stol},
	year         = 2017,
	journal      = {Journal of Systems and Software},
	volume       = 123,
	pages        = {176--189},
	doi          = {https://doi.org/10.1016/j.jss.2015.06.063},
	issn         = {0164-1212},
	keywords     = {Continuous software engineering, Lean software development, DevOps}
}
@inproceedings{Refactoring2020,
	title        = {Behind the Intents: An In-depth Empirical Study on Software Refactoring in Modern Code Review},
	author       = {Paix\~{a}o, Matheus and Uch\^{o}a, Anderson and Bibiano, Ana Carla and Oliveira, Daniel and Garcia, Alessandro and Krinke, Jens and Arvonio, Emilio},
	year         = 2020,
	booktitle    = {Proceedings of the 17th International Conference on Mining Software Repositories},
	location     = {Seoul, Republic of Korea},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	series       = {MSR '20},
	pages        = {125–136},
	doi          = {10.1145/3379597.3387475},
	isbn         = 9781450375177,
	url          = {https://doi.org/10.1145/3379597.3387475},
	numpages     = 12,
	keywords     = {Code Review Mining, Developers' Intents, Refactoring}
}
@article{smellsRefactoring2020,
	title        = {Code smells and refactoring: A tertiary systematic review of challenges and observations},
	author       = {Guilherme Lacerda and Fabio Petrillo and Marcelo Pimenta and Yann Ga\"{e}l Gu\'{e}h\'{e}neuc},
	year         = 2020,
	journal      = {Journal of Systems and Software},
	volume       = 167,
	pages        = 110610,
	doi          = {https://doi.org/10.1016/j.jss.2020.110610},
	issn         = {0164-1212},
	keywords     = {Code smells, Refactoring, Tertiary systematic review},
	abstract     = {Refactoring and smells have been well researched by the software-engineering research community these past decades. Several secondary studies have been published on code smells, discussing their implications on software quality, their impact on maintenance and evolution, and existing tools for their detection. Other secondary studies addressed refactoring, discussing refactoring techniques, opportunities for refactoring, impact on quality, and tools support. In this paper, we present a tertiary systematic literature review of previous surveys, secondary systematic literature reviews, and systematic mappings. We identify the main observations (what we know) and challenges (what we do not know) on code smells and refactoring. We perform this tertiary review using eight scientific databases, based on a set of five research questions, identifying 40 secondary studies between 1992 and 2018. We organize the main observations and challenges about code smell and their refactoring into: smells definitions, most common code-smell detection approaches, code-smell detection tools, most common refactoring, and refactoring tools. We show that code smells and refactoring have a strong relationship with quality attributes, i.e., with understandability, maintainability, testability, complexity, functionality, and reusability. We argue that code smells and refactoring could be considered as the two faces of a same coin. Besides, we identify how refactoring affects quality attributes, more than code smells. We also discuss the implications of this work for practitioners, researchers, and instructors. We identify 13 open issues that could guide future research work. Thus, we want to highlight the gap between code smells and refactoring in the current state of software-engineering research. We wish that this work could help the software-engineering research community in collaborating on future work on code smells and refactoring.}
}
@misc{30yearsSoftwareRefactoring2020,
	title        = {30 Years of Software Refactoring Research:A Systematic Literature Review},
	author       = {Chaima Abid and Vahid Alizadeh and Marouane Kessentini and Thiago do Nascimento Ferreira and Danny Dig},
	year         = 2020,
	doi          = {10.48550/arXiv.2007.02194},
	eprint       = {2007.02194}
}
@article{osterweil1996strategic,
    title          ={Strategic directions in software quality},
    author={Osterweil, Leon},
    journal={ACM Computing Surveys (CSUR)},
    volume={28},
    number={4},
    pages={738--750},
    year        ={1996},
    doi          = {10.1145/242223.242288},
    publisher={ACM New York, NY, USA}
}
@article{articleOpdyke,
author = {Opdyke, William and Johnson, Ralph},
year = {1992},
month = {07},
pages = {},
title = {Refactoring Object-Oriented Frameworks}
}